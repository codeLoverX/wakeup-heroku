[{"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\index.js":"1","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\reportWebVitals.js":"2","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\app\\store.js":"3","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\App.js":"4","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\ScrollToTop.js":"5","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\ProfileSlice.js":"6","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\ProductSlice.js":"7","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\Home.js":"8","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\Footer.js":"9","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\Navbar.js":"10","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\NotificationSlice.js":"11","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\CartSlice.js":"12","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\CheckOut.js":"13","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\SignUp.js":"14","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\Profile.js":"15","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\JerseysPartTwo.js":"16","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\CartPartTwo.js":"17","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\SignIn.js":"18","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\AccessoriesPartTwo.js":"19","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\DescriptionPartTwo.js":"20","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\BootsPartTwo.js":"21","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\Purchases.js":"22","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\Carousel.js":"23","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\api\\api.js":"24","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\Overlay.js":"25","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\EcommerceGridVerticalPartTwo.js":"26","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\notifications\\alert.js":"27","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\notifications\\spinner.js":"28","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\helper\\helper.js":"29","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\api\\auth.js":"30","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\notifications\\success.js":"31","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\EcommerceGridHorizontalPartTwo.js":"32","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\api\\env.js":"33","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\ModalPage.js":"34"},{"size":1021,"mtime":1635690760119,"results":"35","hashOfConfig":"36"},{"size":362,"mtime":499162500000,"results":"37","hashOfConfig":"36"},{"size":376,"mtime":1633178028149,"results":"38","hashOfConfig":"36"},{"size":1966,"mtime":1635775845592,"results":"39","hashOfConfig":"36"},{"size":712,"mtime":1633185945696,"results":"40","hashOfConfig":"36"},{"size":3341,"mtime":1635611937060,"results":"41","hashOfConfig":"36"},{"size":2520,"mtime":1633139053638,"results":"42","hashOfConfig":"36"},{"size":4109,"mtime":1635609426479,"results":"43","hashOfConfig":"36"},{"size":1942,"mtime":1634084895124,"results":"44","hashOfConfig":"36"},{"size":5334,"mtime":1635690760119,"results":"45","hashOfConfig":"36"},{"size":676,"mtime":1633178103652,"results":"46","hashOfConfig":"36"},{"size":4631,"mtime":1633138939079,"results":"47","hashOfConfig":"36"},{"size":8154,"mtime":1633279984576,"results":"48","hashOfConfig":"36"},{"size":6139,"mtime":1634093235247,"results":"49","hashOfConfig":"36"},{"size":12926,"mtime":1635611716491,"results":"50","hashOfConfig":"36"},{"size":2007,"mtime":1633353114686,"results":"51","hashOfConfig":"36"},{"size":10040,"mtime":1633301456984,"results":"52","hashOfConfig":"36"},{"size":5299,"mtime":1635611915347,"results":"53","hashOfConfig":"36"},{"size":2002,"mtime":1633353129001,"results":"54","hashOfConfig":"36"},{"size":12450,"mtime":1635692995641,"results":"55","hashOfConfig":"36"},{"size":1981,"mtime":1633353123435,"results":"56","hashOfConfig":"36"},{"size":8408,"mtime":1633308659451,"results":"57","hashOfConfig":"36"},{"size":2503,"mtime":1632906763594,"results":"58","hashOfConfig":"36"},{"size":1907,"mtime":1635690760119,"results":"59","hashOfConfig":"36"},{"size":607,"mtime":1631396990254,"results":"60","hashOfConfig":"36"},{"size":4281,"mtime":1633316501066,"results":"61","hashOfConfig":"36"},{"size":285,"mtime":1632910114449,"results":"62","hashOfConfig":"36"},{"size":300,"mtime":1632910696341,"results":"63","hashOfConfig":"36"},{"size":74,"mtime":1633282914630,"results":"64","hashOfConfig":"36"},{"size":352,"mtime":1631806889532,"results":"65","hashOfConfig":"36"},{"size":287,"mtime":1632910108785,"results":"66","hashOfConfig":"36"},{"size":3186,"mtime":1633353081368,"results":"67","hashOfConfig":"36"},{"size":253,"mtime":1635690750840,"results":"68","hashOfConfig":"36"},{"size":2608,"mtime":1635778552623,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"60lwua",{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\index.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\reportWebVitals.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\app\\store.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\App.js",["154","155"],"import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport Footer from './components/Footer';\nimport Navbar from './components/Navbar';\n\nimport Home from './pages/Home';\nimport Cart from './pages/CartPartTwo';\nimport SignIn from './pages/SignIn';\nimport CheckOut from './pages/CheckOut';\nimport SignUp from './pages/SignUp';\nimport Profile from './pages/Profile';\nimport DescriptionPartTwo from './pages/DescriptionPartTwo';\nimport JerseysPartTwo from './pages/JerseysPartTwo';\nimport BootsPartTwo from './pages/BootsPartTwo';\nimport AccessoriesPartTwo from './pages/AccessoriesPartTwo';\nimport Purchases from './pages/Purchases';\nimport { cookieKey, hostName } from \"./api/env\"\nimport ModalPage from './pages/ModalPage';\n\nfunction App() {\n\n  return (\n    // DESCRIPTION ROUTE IS IN THE PROFILE PAGE. IT'S AN EMBEDDED ROUTE\n    <div>\n      <ModalPage />\n\n      <Navbar />\n      <Route exact path=\"/\">\n        <Home />\n      </Route>\n\n      {/* <Route path=\"/jerseys\">\n        <Jerseys />\n      </Route> */}\n\n      <Route path=\"/cart\">\n        <Cart />\n      </Route>\n      <Route path=\"/purchases\">\n        <Purchases />\n      </Route>\n      <Route path=\"/checkOut\">\n        <CheckOut />\n      </Route>\n      <Route path=\"/signIn\">\n        <SignIn />\n      </Route>\n      <Route path=\"/signUp\">\n        <SignUp />\n      </Route>\n      <Route path=\"/profile\">\n        <Profile />\n      </Route>\n\n      <Route exact path=\"/jerseys\">\n        <JerseysPartTwo />\n      </Route>\n      <Route path=\"/jerseys/:userPath\">\n        <DescriptionPartTwo />\n      </Route>\n      <Route exact path=\"/boots\">\n        <BootsPartTwo />\n      </Route>\n      <Route path=\"/boots/:userPath\">\n        <DescriptionPartTwo />\n      </Route>\n      <Route exact path=\"/accessories\">\n        <AccessoriesPartTwo />\n      </Route>\n      <Route path=\"/accessories/:userPath\">\n        <DescriptionPartTwo />\n      </Route>\n\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\ScrollToTop.js",["156"],"import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { selectNotifications, setNotificationStatus } from \"../pages/NotificationSlice\";\r\n\r\nfunction ScrollToTop({ history, children }) {\r\n  const state = useSelector(selectNotifications)\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    const unlisten = history.listen(() => {\r\n      window.scrollTo(0, 0);\r\n      dispatch(setNotificationStatus(\"inactive\"))\r\n      console.log({ state })\r\n    });\r\n    return () => {\r\n      unlisten();\r\n    }\r\n  }, []);\r\n\r\n  return <>{children}</>;;\r\n}\r\n\r\nexport default withRouter(ScrollToTop);","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\ProfileSlice.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\ProductSlice.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\Home.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\Footer.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\Navbar.js",["157"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setProfileNull, selectIsSignedIn } from \"../pages/ProfileSlice\";\r\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBNavLink, MDBContainer, MDBIcon } from 'mdbreact';\r\nimport NavbarBrandImg from \"../assets/navbarBrand.gif\"\r\nimport \"./Navbar.css\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getCookie, setCookie } from '../api/api';\r\nimport { cookieKey } from '../api/env';\r\n\r\nfunction FullPageIntroWithNonFixedNavbar() {\r\n\r\n    let history = useHistory();\r\n\r\n    let isSignedIn = useSelector(selectIsSignedIn);\r\n\r\n    const dispatch = useDispatch()\r\n    let [state, setState] = useState({\r\n        collapse: false,\r\n        isWideEnough: false,\r\n    })\r\n\r\n    function onClick() {\r\n        let button = document.querySelector('.navbar-toggler');\r\n        button.classList.toggle('navbar-toggler-special')\r\n        setState((prevState) => {\r\n            return {\r\n                ...prevState,\r\n                collapse: !prevState.collapse,\r\n                isSignedIn\r\n            }\r\n        });\r\n    }\r\n\r\n    function resetUser(event) {\r\n\r\n        const token = getCookie(cookieKey)\r\n        console.log({ token })\r\n        alert(\"Log out\")\r\n        event.preventDefault()\r\n        dispatch(setProfileNull())\r\n\r\n        window.location.reload()\r\n\r\n        setCookie(cookieKey, null, 1)\r\n        setState((prevState) => {\r\n            return {\r\n                ...prevState,\r\n                isSignedIn: false\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        let button = document.querySelector('.navbar-toggler');\r\n        button.classList.add('navbar-toggler-special')\r\n    }, [state]);\r\n\r\n    return (\r\n        <div>\r\n            <header>\r\n                <MDBNavbar fixed=\"top\" light expand=\"lg\" className=\"navbar-custom\" >\r\n                    <MDBContainer>\r\n                        <MDBNavbarBrand href=\"/\" className=\"text-danger\">\r\n                            <img className=\"header-img\" src={NavbarBrandImg} alt=\"Firefootball\" />\r\n                            <strong className=\"d-none d-sm-inline\">GLOBAL FOOTBALL STORE</strong>\r\n                            <strong className=\"d-inline d-sm-none\" style={{ fontSize: \"17px\" }}>GLOBAL FOOTBALL STORE</strong>\r\n\r\n                        </MDBNavbarBrand>\r\n                        <MDBNavbarToggler size=\"sm\" onClick={onClick} />\r\n                        <MDBCollapse onClick={onClick} isOpen={state.collapse} navbar className=\"py-3\" >\r\n                            <MDBNavbarNav right >\r\n                                <MDBNavItem >\r\n                                    <MDBNavLink className=\"text-danger\" to=\"/\">Home</MDBNavLink>\r\n                                </MDBNavItem>\r\n                                <MDBNavItem>\r\n                                    <MDBNavLink className=\"text-danger\" to=\"/jerseys\">Jerseys</MDBNavLink>\r\n                                </MDBNavItem>\r\n                                <MDBNavItem>\r\n                                    <MDBNavLink className=\"text-danger\" to=\"/boots\">Boots</MDBNavLink>\r\n                                </MDBNavItem>\r\n                                <MDBNavItem>\r\n                                    <MDBNavLink className=\"text-danger\" to=\"/accessories\">Accessories</MDBNavLink>\r\n                                </MDBNavItem>\r\n\r\n\r\n                                <MDBNavItem>\r\n                                    <MDBNavLink className=\"text-danger\" to=\"/purchases\">Purchases</MDBNavLink>\r\n                                </MDBNavItem>\r\n                                <MDBNavItem style={{ position: \"relative\", top: \"1vh\" }} className=\"ml-2\">\r\n                                    <MDBNavLink to=\"/cart\" className=\"d-inline cart-icon\">\r\n                                        <MDBIcon className=\"text-danger\" icon=\"cart-arrow-down\" />\r\n                                    </MDBNavLink>\r\n                                    {\r\n                                        !isSignedIn &&\r\n                                        <MDBNavLink to=\"/signIn\" className=\"d-inline\">\r\n                                            <MDBIcon className=\"text-danger\" icon=\"sign-in-alt\" />\r\n                                        </MDBNavLink>\r\n                                    }\r\n                                    {\r\n                                        isSignedIn &&\r\n                                        <MDBIcon className=\"text-danger\" icon=\"sign-out-alt\" onClick={(evt) => { resetUser(evt) }} />\r\n                                    }\r\n                                    {\r\n                                        isSignedIn &&\r\n                                        <MDBNavLink to=\"/profile\" className=\"d-inline\">\r\n                                            <MDBIcon className=\"text-danger\" far icon=\"user-circle\" />\r\n                                        </MDBNavLink>\r\n                                    }\r\n\r\n                                </MDBNavItem>\r\n\r\n\r\n\r\n                            </MDBNavbarNav>\r\n                        </MDBCollapse>\r\n                    </MDBContainer>\r\n                </MDBNavbar>\r\n            </header>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default FullPageIntroWithNonFixedNavbar;","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\NotificationSlice.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\CartSlice.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\CheckOut.js",["158","159","160","161"],"import React, { useState, useEffect } from \"react\";\r\nimport { MDBContainer, MDBCol, MDBRow, MDBCard, MDBCardBody, MDBBtn, MDBTabPane, MDBNav, MDBIcon } from \"mdbreact\";\r\nimport \"./CheckOut.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectProfileDetails, fetchProfile, editProfile } from \"./ProfileSlice\";\r\nimport { useHistory } from \"react-router\";\r\nimport { api } from \"../api/api\";\r\n\r\nfunction CheckOut() {\r\n\r\n    let user = useSelector(selectProfileDetails)\r\n    let history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    {/* Form values handler */ }\r\n\r\n    // initial value\r\n    let [input, setInput] = useState({\r\n        addressFirst: \"\",\r\n        addressSecond: \"\",\r\n        creditCardCVV: \"\",\r\n        creditCardNumber: \"\",\r\n        changed: false\r\n    })\r\n\r\n    // change value\r\n    let onChange = async (event) => {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.id;\r\n        console.log(input)\r\n        if (input.changed) {\r\n            setInput({\r\n                ...input,\r\n                [name]: value\r\n            });\r\n        } else {\r\n            setInput({\r\n                ...input,\r\n                changed: true,\r\n                [name]: value\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    let updateAddressCard = async () => {\r\n        if (user.totalPurchase > 0) {\r\n            if (input.changed) {\r\n                await dispatch(editProfile({ body: { addressFirst: input.addressFirst, addressSecond: input.addressSecond, creditCardNumber: input.creditCardNumber, creditCardCVV: input.creditCardCVV } }))\r\n            }\r\n            const response = await api('POST', 'cart', {\r\n                mode: 'cors'\r\n            })\r\n            console.log({ response })\r\n            history.replace(\"/purchases\")\r\n        }\r\n        else {\r\n            alert(\"First add a credit card.\")\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        let controller = new AbortController();\r\n        async function fetchData() {\r\n            try {\r\n                await dispatch(fetchProfile())\r\n                setInput({\r\n                    addressFirst: user.addressFirst,\r\n                    addressSecond: user.addressSecond,\r\n                    creditCardCVV: user.creditCardCVV,\r\n                    creditCardNumber: user.creditCardNumber\r\n                })\r\n            } catch (rejectedValueOrSerializedError) {\r\n                console.log({ failed: rejectedValueOrSerializedError })\r\n            }\r\n        }\r\n\r\n        try {\r\n            fetchData()\r\n        } catch (rejectedValueOrSerializedError) {\r\n            console.log({ failed: rejectedValueOrSerializedError })\r\n        }\r\n        return () => {\r\n            controller?.abort();\r\n\r\n        }\r\n    }, [user.creditCardNumber])\r\n\r\n    return (\r\n        <MDBContainer className=\"mb-5\">\r\n            <MDBRow className=\"my-2\" center>\r\n                <MDBCard className=\"w-100\">\r\n                    <MDBCardBody>\r\n                        <MDBRow>\r\n\r\n                            <MDBCol md=\"6\" className=\"my-0\">\r\n\r\n                                <div>\r\n                                    <MDBNav pills className=\"amber-text nav-justified\">\r\n                                        <h3>\r\n                                            Address of delivery\r\n                                        </h3>\r\n                                    </MDBNav>\r\n                                    <div >\r\n                                        <label htmlFor=\"addressFirst\" className=\"my-2\">Street Address</label>\r\n                                        <input type=\"text\" id=\"addressFirst\" className=\"form-control\" onChange={(event) => onChange(event)} value={input.addressFirst} />\r\n                                        <label htmlFor=\"addressSecond\" className=\"my-2\">City, Address</label>\r\n                                        <input type=\"text\" id=\"addressSecond\" className=\"form-control\" onChange={(event) => onChange(event)} value={input.addressSecond} />\r\n                                    </div>\r\n                                </div>\r\n                                <MDBNav pills className=\"nav-justified amber-text mt-3\">\r\n                                    <h3>\r\n                                        Credit Card\r\n                                    </h3>\r\n                                </MDBNav>\r\n\r\n                                <div>\r\n                                    <div className=\"d-flex justify-content-around mb-3\">\r\n                                        <div className=\"w-50\">\r\n                                            <label htmlFor=\"cc-number123\">Credit card number</label>\r\n                                            <input type=\"text\" className=\"form-control\" id=\"creditCardNumber\" onChange={(event) => onChange(event)} value={input.creditCardNumber} required />\r\n                                        </div>\r\n                                        <div className=\"w-50\">\r\n                                            <label htmlFor=\"cc-cvv123\">CVV</label>\r\n                                            <input type=\"text\" className=\"form-control\" id=\"creditCardCVV\" onChange={(event) => onChange(event)} value={input.creditCardCVV} required />\r\n\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"invalid-feedback\">\r\n                                        Credit card number is required\r\n                                    </div>\r\n\r\n                                </div>\r\n                                <MDBBtn color=\"amber lighten-4\" outline size=\"small\" onClick={updateAddressCard} >\r\n                                    Purchase Items\r\n                                </MDBBtn>\r\n                            </MDBCol>\r\n\r\n                            <MDBCol lg=\"6\" className=\"my-4\">\r\n\r\n                                <MDBCard>\r\n                                    <MDBCardBody>\r\n                                        \r\n                                        <h4 className=\"my-1 text-center text-warning\">Summary</h4>\r\n                                        <hr />\r\n                                        <MDBRow>\r\n                                            <MDBCol sm=\"8\">\r\n                                                Total Purchases\r\n                                            </MDBCol>\r\n                                            <MDBCol sm=\"4\">\r\n                                                £ {user.totalPurchase}\r\n                                            </MDBCol>\r\n                                            <hr />\r\n                                            <MDBCol sm=\"8\">\r\n                                                Delivery costs\r\n                                            </MDBCol>\r\n                                            <MDBCol sm=\"4\">\r\n                                                £ {50.00}\r\n                                            </MDBCol>\r\n                                            <hr />\r\n\r\n                                            <MDBCol sm=\"8\">\r\n                                                <strong>Total</strong>\r\n                                            </MDBCol>\r\n                                            <MDBCol sm=\"4\">\r\n                                                <strong> £ {user.totalPurchase + 50.00}</strong>\r\n                                            </MDBCol>\r\n                                        </MDBRow>\r\n                                        <br />\r\n                                        <p className=\"text-amber lighten-1 mb-0\"><i className=\"fas fa-info-circle mr-1\"></i> Do not delay the purchase, adding\r\n                                            items to your cart does not mean booking them.</p>\r\n                                    </MDBCardBody>\r\n\r\n                                </MDBCard>\r\n\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    </MDBCardBody>\r\n                </MDBCard>\r\n            </MDBRow >\r\n        </MDBContainer >\r\n    );\r\n\r\n}\r\n\r\nexport default CheckOut;","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\SignUp.js",["162","163","164","165","166"],"import React, { useState } from \"react\";\r\nimport {\r\n    MDBContainer, MDBCol, MDBRow, MDBCard, MDBCardBody,  MDBCardTitle, MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./SignIn.css\"\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n    GoogleReCaptcha\r\n} from 'react-google-recaptcha-v3';\r\nimport Spinner from \"../components/notifications/spinner\";\r\nimport AlertPage from \"../components/notifications/alert\";\r\nimport Success from \"../components/notifications/success\";\r\nimport { signup } from \"../api/auth\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nfunction SignIn() {\r\n\r\n    {/* Notification handler */ }\r\n    // initial value\r\n    let [notification, setNotification] = useState({\r\n        loading: false,\r\n        error: false,\r\n        success: false\r\n    })\r\n\r\n    let history = useHistory();\r\n\r\n    {/* Form values handler */ }\r\n\r\n    // initial value\r\n    let [input, setInput] = useState({\r\n        fname: \"\",\r\n        lname: \"\",\r\n        password: \"\",\r\n        email: \"\"\r\n    })\r\n    // change value\r\n    let onChange = async (event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        console.log(input)\r\n        setInput({\r\n            ...input,\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n\r\n    {/* Form values submit */ }\r\n\r\n    let onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        setNotification({\r\n            loading: false,\r\n            error: false,\r\n            success: false\r\n        })\r\n        try {\r\n            let response = await signup({\r\n                name: input.fname.trim() + input.lname.trim(),\r\n                password: input.password,\r\n                email: input.email\r\n            })\r\n            setNotification({\r\n                ...notification,\r\n                loading: true\r\n            })\r\n            if (response.success === true) {\r\n                setNotification({\r\n                    ...notification,\r\n                    loading: false,\r\n                    success: true\r\n                })\r\n\r\n                history.push(\"/\");\r\n\r\n            } else {\r\n                setNotification({\r\n                    ...notification,\r\n                    loading: false,\r\n                    error: true\r\n                })\r\n            }\r\n        }\r\n        catch (error) {\r\n            setNotification({\r\n                ...notification,\r\n                loading: false,\r\n                error: true\r\n            })        }\r\n    }\r\n\r\n    {/* Recaptcha */}\r\n\r\n     // initial value\r\n     const [token, setToken] = useState();\r\n    \r\n    return (\r\n        <MDBContainer>\r\n            <div className=\"scaffold\">\r\n                <MDBRow className=\"my-2\" center>\r\n                    <MDBCard className=\"mx-auto real-signin-container\">\r\n                        <MDBCardTitle className=\"text-align-center mt-5\">\r\n                            <b > GLOBAL SOCCER SHOP </b>\r\n                        </MDBCardTitle>\r\n                        <MDBCardBody>\r\n                            <form  >\r\n                                <MDBRow>\r\n                                    <MDBCol>\r\n                                        <label htmlFor=\"fname\" className=\"d-block mb-3\" > First name </label>\r\n                                        <input type=\"text\" id=\"fname\" name=\"fname\" className=\"form-control\" onChange={(event) => { onChange(event) }} placeholder=\"Enter your first name\" />\r\n\r\n                                        <label htmlFor=\"lname\" className=\"d-block my-3\" > Last name </label>\r\n                                        <input type=\"text\" id=\"lname\" name=\"lname\" className=\"form-control\" onChange={(event) => { onChange(event) }} placeholder=\"Enter your last name\" />\r\n\r\n                                        <label htmlFor=\"email\" className=\"d-block my-3\" > Email address </label>\r\n                                        <div className=\"input-group my-3\">\r\n                                            <input type=\"email\" id=\"email\" name=\"email\" className=\"form-control py-0\" onChange={(event) => { onChange(event) }} placeholder=\"Enter your email address\" aria-describedby=\"basic-addon1\" />\r\n                                        </div>\r\n                                        <label htmlFor=\"password\" className=\"d-block my-3\"> Password </label>\r\n                                        <div className=\"input-group my-3\">\r\n                                            <input type=\"password\" id=\"password\" name=\"password\" className=\"form-control\" onChange={(event) => { onChange(event) }} placeholder=\"Enter your password\" />\r\n                                        </div>\r\n                                        <GoogleReCaptcha\r\n                                            onVerify={token => {\r\n                                                setToken(token);\r\n                                            }}\r\n                                        />\r\n                                        {notification.loading && <Spinner />}\r\n                                        {notification.error && <AlertPage text=\"Not signed in\"/>}\r\n                                        {notification.success && <Success text=\"Signed in\"/>}\r\n                                        <br />\r\n                                        <br />\r\n                                        <div className=\"text-align-center\">\r\n                                            <MDBBtn outline color=\"amber lighten-1\" type=\"submit\" onClick={(event) => { onSubmit(event) }} > Sign Up </MDBBtn>\r\n                                        </div>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </form>\r\n                            <small>\r\n                                <Link className=\"text-danger\" to=\"/signIn\">Already have an account? Sign in instead.</Link>\r\n                            </small>\r\n                        </MDBCardBody>\r\n                    </MDBCard>\r\n                </MDBRow >\r\n            </div>\r\n        </MDBContainer >\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default SignIn;","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\Profile.js",["167","168","169","170"],"import React, { useEffect, useState }\r\n    from \"react\";\r\nimport {\r\n    MDBContainer, MDBCol, MDBRow, MDBCard, MDBCardBody, MDBNav, MDBTabPane,\r\n    MDBIcon,\r\n    MDBAlert\r\n} from \"mdbreact\";\r\nimport \"./SignIn.css\"\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectProfileDetails, fetchProfile, editProfile, selectIsSignedIn } from \"./ProfileSlice\";\r\n\r\nfunction Profile() {\r\n    let [user, setUser] = useState(useSelector(selectProfileDetails))\r\n    let isSignedIn = useState(useSelector(selectIsSignedIn))\r\n\r\n    const dispatch = useDispatch()\r\n    let toggleCollapse1 = (collapseID) => () => {\r\n        let collapse = document.getElementById(collapseID);\r\n        collapse.classList.toggle(\"d-none\");\r\n    }\r\n\r\n    {/* Form values handler */ }\r\n\r\n    // initial value\r\n    let [input, setInput] = useState({\r\n        addressFirst: \"\",\r\n        addressSecond: \"\",\r\n        creditCardCVV: \"\",\r\n        creditCardNumber: \"\"\r\n    })\r\n\r\n    // change value\r\n    let onChange = async (event) => {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.id;\r\n        console.log(input)\r\n        setInput({\r\n            ...input,\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n\r\n    let updateAddress = async () => {\r\n        let result= await dispatch(editProfile({ body: { addressFirst: input.addressFirst, addressSecond: input.addressSecond } })).unwrap()\r\n        console.log({result})\r\n        // wil reset\r\n        setUser({\r\n            ...user,\r\n            addressFirst: input.addressFirst, addressSecond: input.addressSecond\r\n        })\r\n    }\r\n    let updateCard = async () => {\r\n        let result= await dispatch(editProfile({ body: { creditCardNumber: input.creditCardNumber, creditCardCVV: input.creditCardCVV } }))\r\n        console.log({result})\r\n        // wil reset\r\n        setUser({\r\n            ...user,\r\n            creditCardNumber: input.creditCardNumber, creditCardCVV: input.creditCardCVV\r\n        })\r\n    }\r\n    useEffect(() => {\r\n        let controller = new AbortController();\r\n        async function fetchData() {\r\n\r\n            await dispatch(fetchProfile())\r\n            setInput({\r\n                addressFirst: (user.addressFirst === undefined) ? \"\" : user.addressFirst,\r\n                addressSecond: (user.addressSecond === undefined) ? \"\" : user.addressSecond,\r\n                creditCardCVV: (user.creditCardCVV === undefined) ? \"\" : user.creditCardCVV,\r\n                creditCardNumber: (user.creditCardNumber === undefined) ? \"\" : user.creditCardNumber\r\n            })\r\n\r\n        }\r\n\r\n        try {\r\n            fetchData()\r\n        } catch (rejectedValueOrSerializedError) {\r\n            console.log({ failed: rejectedValueOrSerializedError })\r\n        }\r\n        return () => {\r\n            controller?.abort();\r\n\r\n        }\r\n    }, [user.creditCardNumber, isSignedIn])\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <div className=\"scaffold mx-auto\">\r\n                <MDBRow center>\r\n                    <MDBCard className=\"mx-auto real-profile-container\">\r\n                        {/* <MDBCardBody> */}\r\n                        <form style={{ fontSize: \"16px\" }}>\r\n                            {/* <MDBTabPane> */}\r\n\r\n                            <MDBRow style={{ marginBottom: \"0px\", marginTop: \"0px !important\", fontSize: \"16px\" }}>\r\n                                <MDBNav pills className=\"mx-auto amber-text my-0 prepostTitle d-flex flex-column justify-content-center\">\r\n                                    <h2> PERSONAL DETAILS</h2>\r\n                                </MDBNav>\r\n                                <MDBCol md=\"12\" className=\"my-0\">\r\n                                    <label htmlFor=\"name\" className=\"my-2\">Name</label>\r\n                                    <input type=\"text\" id=\"name\" value={user.name} className=\"form-control\" />\r\n                                    <label htmlFor=\"role\" className=\"my-2\">Role</label>\r\n                                    <input type=\"text\" id=\"role\" value={String(user.role)} className=\"form-control\" />\r\n                                    <label htmlFor=\"email\" className=\"my-2\">Email address</label>\r\n                                    <input type=\"text\" id=\"email\" className=\"form-control\" value={user.email} placeholder=\"youremail@example.com\" />\r\n                                </MDBCol>\r\n\r\n                            </MDBRow>\r\n\r\n                            <MDBRow style={{ marginBottom: \"0px !important\", margnTop: \"0px !important\" }}>\r\n\r\n                                <MDBCol md=\"12\">\r\n                                    <div>\r\n                                        <MDBNav pills className=\"amber-text nav-justified\">\r\n                                            <h3>\r\n                                                <span>Address</span>\r\n                                                <  MDBIcon icon=\"angle-down\"\r\n                                                    size=\"sm\"\r\n                                                    className=\"ml-4\"\r\n                                                    onClick={toggleCollapse1(\"basicCollapse1\")}\r\n                                                />\r\n                                                <  MDBIcon icon=\"save\"\r\n                                                    size=\"sm\"\r\n                                                    className=\"ml-4\"\r\n                                                    onClick={updateAddress}\r\n                                                />\r\n                                            </h3>\r\n                                        </MDBNav>\r\n                                        <div id=\"basicCollapse1\" className=\"d-none\">\r\n\r\n                                            {user.addressFirst === undefined && user.addressSecond === undefined &&\r\n                                                <>\r\n                                                    <MDBAlert color=\"info\" dismiss>\r\n                                                        Address is required! Please add.\r\n                                                    </MDBAlert>\r\n                                                    <label htmlFor=\"addressFirst\" className=\"my-2\">Street Address</label>\r\n                                                    <input type=\"text\" id=\"addressFirst\" className=\"form-control\" onChange={(event) => onChange(event)} value={input.addressFirst} />\r\n                                                    <label htmlFor=\"addressSecond\" className=\"my-2\">City, Address</label>\r\n                                                    <input type=\"text\" id=\"addressSecond\" className=\"form-control\" onChange={(event) => onChange(event)} value={input.addressSecond} />\r\n                                                </>\r\n                                            }\r\n                                            {user.addressFirst !== undefined && user.addressSecond !== undefined &&\r\n                                                <>\r\n                                                    <label htmlFor=\"addressFirst\" className=\"my-2\">Street Address</label>\r\n                                                    <input type=\"text\" id=\"addressFirst\" className=\"form-control\" onChange={(event) => onChange(event)} value={input.addressFirst} placeholder={\"Haven't added address yet!\"} />\r\n                                                    <label htmlFor=\"addressSecond\" className=\"my-2\">City, Address</label>\r\n                                                    <input type=\"text\" id=\"addressSecond\" className=\"form-control\" onChange={(event) => onChange(event)} value={input.addressSecond} placeholder={\"Add your address.\"} />\r\n                                                </>\r\n                                            }\r\n\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </MDBCol>\r\n                            </MDBRow>\r\n\r\n                            <MDBRow style={{ marginBottom: \"0px !important\", margnTop: \"0px !important\" }}>\r\n                                <MDBCol md=\"12\">\r\n                                    <MDBNav pills className=\"nav-justified amber-text\">\r\n                                        <h3>\r\n                                            <span>Billing</span>\r\n                                            <MDBIcon icon=\"angle-down ml-3\" size=\"sm\"\r\n                                                onClick={toggleCollapse1(\"basicCollapse2\")}\r\n                                            />\r\n                                            <  MDBIcon icon=\"save\"\r\n                                                size=\"sm\"\r\n                                                className=\"ml-4\"\r\n                                                onClick={updateCard}\r\n                                            />\r\n                                        </h3>\r\n                                    </MDBNav>\r\n                                    <div id=\"basicCollapse2\" className=\"d-none\">\r\n\r\n                                        <div className=\"my-3\">\r\n\r\n                                            {user.creditCardNumber === undefined && user.creditCardCVV === undefined &&\r\n                                                <>\r\n                                                    <MDBAlert color=\"info\" dismiss>\r\n                                                        Credit card is required! Please add.\r\n                                                    </MDBAlert>\r\n                                                    <div className=\"w-50\">\r\n                                                        <label htmlFor=\"cc-number123\">Credit card number</label>\r\n                                                        <input type=\"text\" className=\"form-control\" id=\"creditCardNumber\" onChange={(event) => onChange(event)} value={input.creditCardNumber} placeholder={\"Card Number\"} required />\r\n                                                    </div>\r\n                                                    <div className=\"w-50\">\r\n                                                        <label htmlFor=\"cc-cvv123\">CVV</label>\r\n                                                        <input type=\"text\" className=\"form-control\" id=\"creditCardCVV\" onChange={(event) => onChange(event)} value={input.creditCVV} placeholder={\"Card CVV\"} required />\r\n                                                    </div>\r\n                                                </>\r\n\r\n                                            }\r\n\r\n                                            {user.creditCardNumber !== undefined && user.creditCardCVV !== undefined &&\r\n                                                <>\r\n                                                    <label htmlFor=\"cc-name123\">Name on card</label>\r\n                                                    <input type=\"text\" className=\"form-control\" id=\"cc-name123\" value={user.name} onChange={()=>{}} required />\r\n                                                    <br />\r\n                                                    <small className=\"text-muted\">Full name as displayed on card</small>\r\n                                                    <br />\r\n                                                    <div className=\"invalid-feedback\">\r\n                                                        Name on card is required\r\n                                                    </div>\r\n                                                    <div className=\"w-50\">\r\n                                                        <label htmlFor=\"cc-number123\">Credit card number</label>\r\n                                                        <input type=\"text\" className=\"form-control\" id=\"creditCardNumber\" onChange={(event) => onChange(event)} value={input.creditCardNumber} required />\r\n                                                    </div>\r\n                                                    <div className=\"w-50\">\r\n                                                        <label htmlFor=\"cc-cvv123\">CVV</label>\r\n                                                        <input type=\"text\" className=\"form-control\" id=\"creditCardCVV\" onChange={(event) => onChange(event)} value={input.creditCardCVV} required />\r\n                                                    </div>\r\n                                                </>\r\n                                            }\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </MDBCol>\r\n                            </MDBRow>\r\n\r\n\r\n\r\n                            {/* </MDBTabPane> */}\r\n                        </form>\r\n\r\n                        {/* </MDBCardBody> */}\r\n                    </MDBCard>\r\n                </MDBRow >\r\n            </div>\r\n        </MDBContainer >\r\n    );\r\n\r\n}\r\n\r\nexport default Profile;","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\JerseysPartTwo.js",["171","172"],"import React, { useEffect } from 'react'\r\nimport EcommerceGridHorizontal from '../components/EcommerceGridHorizontalPartTwo'\r\nimport EcommerceGridVertical from '../components/EcommerceGridVerticalPartTwo'\r\nimport Overlay from '../components/Overlay'\r\nimport JerseyImg from \"../assets/Jerseys.jpg\"\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { fetchAll, selectProducts } from './ProductSlice'\r\nimport { useParams } from 'react-router-dom'\r\n\r\n// The placement of react router is everything\r\n// If you want the page to be replaced, \r\n// no other alternative but to put here.\r\n\r\nfunction JerseysPartTwo() {\r\n    // /:userPath\r\n    // variable must be userPath\r\n    const { userPath } = useParams();\r\n    console.log({ userPath })\r\n\r\n    // let urlNamePart = value.name.replace(/\\s/g, '').toLowerCase();\r\n    // urlNamePart = urlNamePart.replaceAll(\"/\", \"-\")\r\n\r\n    let elem = useSelector(selectProducts)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        let controller = new AbortController();\r\n        async function fetchData() {\r\n            try {\r\n                const originalPromiseResult = await dispatch(fetchAll('jerseys')).unwrap()\r\n                if (originalPromiseResult.product)\r\n                    console.log({ okay: originalPromiseResult })\r\n            } catch (rejectedValueOrSerializedError) {\r\n                console.log({ failed: rejectedValueOrSerializedError })\r\n            }\r\n        }\r\n\r\n        fetchData()\r\n\r\n        return () => {\r\n            return () => controller?.abort();\r\n        }\r\n    }, [elem.length])\r\n\r\n    return (\r\n        <div>\r\n            <Overlay imgSrc={JerseyImg} alt=\"jerseys\" >\r\n                <h1>THE HEROES</h1>\r\n                <h5>OF OLD</h5>\r\n            </Overlay>\r\n            {/* <EcommerceGridHorizontal product=\"jerseys\" data={elem} numberOfItems={4} headingTrue={true} /> */}\r\n            <EcommerceGridVertical product=\"jerseys\" data={elem} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JerseysPartTwo\r\n","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\CartPartTwo.js",["173","174","175"],"import React, { useState, Fragment, useEffect } from \"react\";\r\nimport { MDBRow, MDBCard, MDBCardBody, MDBTable, MDBTableBody, MDBTableHead, MDBBtn, MDBCollapse, MDBIcon } from \"mdbreact\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectCart, editProduct, fetchCart, deleteProduct } from \"./CartSlice\";\r\nimport { useHistory } from \"react-router\";\r\nimport \"./Cart.css\"\r\nimport { editProfile } from \"./ProfileSlice\";\r\nimport { roundOff } from \"../helper/helper\";\r\n// name, price, imageSrc, type\r\n// inputs: rate, size, quantity\r\n\r\n\r\nexport default function Cart() {\r\n  /*\r\n          name, price, imageSrc, type\r\n          inputs: rate, size, quantity\r\n      */\r\n\r\n\r\n  let data = useSelector(selectCart);\r\n  let [collapse, setCollapse] = useState(Array(data.length).fill(false));\r\n  let toggleCollapse = index => () => {\r\n    setCollapse((prev) => {\r\n      let newCollapse = [...prev]\r\n      newCollapse[index] = !prev[index]\r\n      return newCollapse\r\n    })\r\n  }\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  let columns = [\r\n    {\r\n      label: <strong>Image</strong>,\r\n      field: 'imageSrc',\r\n    },\r\n    {\r\n      label: <strong>Cart</strong>,\r\n      field: 'name'\r\n    },\r\n    {\r\n      label: <strong>Size</strong>,\r\n      field: 'size'\r\n    },\r\n    {\r\n      label: <strong>Price</strong>,\r\n      field: 'price'\r\n    },\r\n    {\r\n      label: <strong>Quantity</strong>,\r\n      field: 'quantity'\r\n    },\r\n    {\r\n      label: <strong>Amount</strong>,\r\n      field: 'amount'\r\n    },\r\n    {\r\n      label: <strong>Delete</strong>,\r\n      field: 'button'\r\n    }\r\n  ]\r\n\r\n  let total = 0;\r\n  let rows = []\r\n  if (data.products) {\r\n    if (data.products[0] !== null) {\r\n      data.products.forEach((value, index) => {\r\n        let totalPrice = 0\r\n        totalPrice = parseFloat(data.description[index].quantity) * roundOff(parseFloat(value.price))\r\n        total += roundOff(totalPrice)\r\n        rows.push(\r\n          {\r\n            'imageSrc': <img src={`/assets/${value.type}/${value.image}`} alt=\"\" style={{ width: \"50px\" }} />,\r\n            'name': <strong> {value.name}</strong>,\r\n            'size': <strong> {data.description[index].size} </strong>,\r\n            'price': <strong> £ {roundOff(value.price)} </strong>,\r\n            'quantity':\r\n              <input name=\"quantity\" value={data.description[index].quantity} className=\"specialInput border-warning\" style={{ width: \"100px\" }} onChange={(evt) => { handleInputChange(evt, index) }} />,\r\n            'amount': <strong> £ {totalPrice}</strong>,\r\n            'button':\r\n              <MDBIcon far icon=\"times-circle\" className=\"amber-text\" onClick={() => { deleteCart(index) }} />\r\n\r\n            // <MDBBtn outline color=\"amber\" size=\"sm\" onClick={() => { deleteCart(index) }}>\r\n            //   X\r\n            // </MDBBtn>\r\n          }\r\n        )\r\n      });\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    // fetch Data\r\n    async function fetchData() {\r\n      await dispatch(fetchCart()).unwrap()\r\n      // if (originalPromiseResult.cart)\r\n      //   setData(originalPromiseResult.cart)\r\n    }\r\n\r\n    let controller = new AbortController();\r\n    try {\r\n      fetchData()\r\n    } catch (rejectedValueOrSerializedError) {\r\n      console.log({ failed: rejectedValueOrSerializedError })\r\n    }\r\n    return () => {\r\n      controller?.abort();\r\n\r\n    }\r\n  }, [data.length])\r\n  let handleInputChange = async (event, index) => {\r\n    let quantity = parseInt(event.target.value);\r\n    let size = data.description[index].size\r\n    index = parseInt(index)\r\n    if (quantity <= 0) {\r\n      alert(\"value cannot be less than zero\");\r\n    }\r\n    else {\r\n      let body = { size, quantity }\r\n      let productId = data.products[index]._id\r\n      // console.log({ size, quantity, productId })\r\n      let returnValue = await dispatch(editProduct({ productId, index, body })).unwrap()\r\n      console.log(returnValue)\r\n\r\n    }\r\n  }\r\n  let checkOut = async (totalPurchase) => {\r\n    if (rows.length === 0 && totalPurchase > 0) {\r\n      alert(\"Purchase an item first!\");\r\n    }\r\n    else {\r\n      let returnValue = await dispatch(editProfile({ body: { totalPurchase } })).unwrap()\r\n      console.log(returnValue)\r\n      history.replace(\"/checkOut\")\r\n    }\r\n  }\r\n\r\n  let deleteCart = (index) => {\r\n    dispatch(deleteProduct(index))\r\n  }\r\n\r\n  return (\r\n    <div style={{ minHeight: \"100vh\" }}>\r\n      <MDBRow className=\"my-2 special-margin\" center>\r\n        <MDBCard style={{ marginTop: \"50px\" }}>\r\n          <MDBCardBody>\r\n\r\n            <h3 className=\"text-warning my-2 text-center\"> Shopping Cart </h3>\r\n            {/* Table */}\r\n            <br />\r\n            <MDBTable className=\"product-table d-none d-lg-table w-80\">\r\n              <MDBTableHead className=\"form-control font-weight-bold\" color=\"amber lighten-5\" columns={columns} />\r\n              <MDBTableBody rows={rows} />\r\n            </MDBTable>\r\n\r\n            {/* Table */}\r\n            <div className=\"px-3\">\r\n              <div  className=\"d-grid d-lg-none w-80 border border-warning py-2\"\r\n                style={{\r\n                  display: \"grid \", gridTemplateColumns: \"0.5fr 1fr 3fr 1fr\", justifyContent: \"center\",\r\n                  alignItems: \"center\", background: \"#FFF8E1\"\r\n\r\n                }}\r\n              >\r\n                <span\r\n                >\r\n                  \r\n                </span>\r\n                <span>\r\n                  Image\r\n                </span>\r\n                <span>\r\n                  Name\r\n                </span>\r\n                <div\r\n                  className=\"mx-auto\"\r\n                >\r\n                </div>\r\n              </div>\r\n              {\r\n                data.products &&\r\n                data.products[0] !== null &&\r\n                rows.map((val, index) => {\r\n\r\n                  return (\r\n                    <Fragment key={`${val}${index}}`} >\r\n                      <div onClick={toggleCollapse(index)} className=\"d-grid d-lg-none w-80 border-top border-bottom border-warning py-2\"\r\n                        style={{\r\n                          display: \"grid \", gridTemplateColumns: \"0.5fr 1fr 3fr 1fr\", justifyContent: \"center\",\r\n                          alignItems: \"center\"\r\n\r\n                        }}\r\n                      >\r\n                        <span\r\n                        >\r\n                          <  MDBIcon icon=\"angle-down\" />\r\n                        </span>\r\n                        <span>\r\n                          {val.imageSrc}\r\n                        </span>\r\n                        <span>\r\n                          {val.name}\r\n\r\n                        </span>\r\n                        <div\r\n                          className=\"mx-auto\"\r\n                        >\r\n                          <MDBIcon far icon=\"times-circle\" onClick={() => { deleteCart(index) }} />\r\n                        </div>\r\n                      </div>\r\n                      <MDBCollapse id=\"basicCollapse\" isOpen={collapse[index]} className=\"py-3 align-items-around\" style={{ height: \"130px\" }}>\r\n                        <div className=\"pl-5 ml-5\">\r\n                          <strong> Size: {val.size} </strong>\r\n                          <br />\r\n                          <strong> Price: {val.price} </strong>\r\n                          <br />\r\n                          <strong> Quantity {val.quantity} </strong>\r\n                          <br />\r\n                          <strong> {val.amount}</strong>\r\n                        </div>\r\n                      </MDBCollapse>\r\n                    </Fragment>\r\n                  )\r\n                }\r\n                )\r\n              }\r\n            </div>\r\n            {\r\n              !data.products ||\r\n              data.products[0] === null &&\r\n              <div style={{ textAlign: \"center\" }}>\r\n                Added nothing to cart !\r\n              </div>\r\n\r\n            }\r\n            {\r\n\r\n              data.products &&\r\n              data.products[0] !== null &&\r\n              <div className=\"pr-5\">\r\n                <div className=\"mt-3 d-flex justify-content-end\">\r\n                  <strong>TOTAL : &nbsp;</strong>\r\n                  <strong className=\"ml-4\">{roundOff(total)}</strong>\r\n                </div>\r\n              </div>\r\n            }\r\n          </MDBCardBody>\r\n\r\n\r\n\r\n          <MDBCardBody>\r\n            <div className=\"mb-3\">\r\n              <div className=\"pt-1\">\r\n                <p className=\"text-amber lighten-1 mb-0\"><i className=\"fas fa-info-circle mr-1\"></i> Do not delay the purchase, adding\r\n                  items to your cart does not mean booking them.</p>\r\n                {/* <Redirect to=\"/checkOut\"> */}\r\n                <div className=\"mb-3\">\r\n                  <MDBBtn onClick={() => { checkOut(total) }} outline color=\"amber lighten-1\">Check Out</MDBBtn>\r\n                </div>\r\n                {/* </Redirect> */}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"mb-3\">\r\n              <div className=\"pt-2\">\r\n                <p className=\"mb-1\">We accept the following payment methods:</p>\r\n                <img className=\"mr-2\" width=\"30px\"\r\n                  src=\"https://mdbootstrap.com/wp-content/plugins/woocommerce-gateway-stripe/assets/images/visa.svg\"\r\n                  alt=\"Visa\" />\r\n                <img className=\"mr-2\" width=\"30px\"\r\n                  src=\"https://mdbootstrap.com/wp-content/plugins/woocommerce-gateway-stripe/assets/images/amex.svg\"\r\n                  alt=\"American Express\" />\r\n                <img className=\"mr-2\" width=\"30px\"\r\n                  src=\"https://mdbootstrap.com/wp-content/plugins/woocommerce-gateway-stripe/assets/images/mastercard.svg\"\r\n                  alt=\"Mastercard\" />\r\n                <img className=\"mr-2\" width=\"30px\"\r\n                  src=\"https://mdbootstrap.com/wp-content/plugins/woocommerce/includes/gateways/paypal/assets/images/paypal.png\"\r\n                  alt=\"PayPal acceptance mark\" />\r\n              </div>\r\n            </div>\r\n\r\n\r\n          </MDBCardBody>\r\n        </MDBCard>\r\n      </MDBRow>\r\n    </div >\r\n  );\r\n}\r\n\r\n\r\n","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\SignIn.js",["176","177","178"],"import React, { useState } from \"react\";\r\nimport {\r\n    MDBContainer, MDBCol, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBBtn\r\n} from \"mdbreact\";\r\nimport \"./SignIn.css\"\r\nimport NavbarBrandImg from \"../assets/navbarBrand.gif\"\r\nimport { Link } from \"react-router-dom\";\r\nimport Spinner from \"../components/notifications/spinner\";\r\nimport AlertPage from \"../components/notifications/alert\";\r\nimport Success from \"../components/notifications/success\";\r\nimport { login } from \"../api/auth\";\r\nimport { setCookie } from \"../api/api\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { fetchProfile, setSignedIn } from \"./ProfileSlice\";\r\n\r\nfunction SignIn() {\r\n\r\n    // fetch dispatch\r\n\r\n    const dispatch = useDispatch()    \r\n\r\n    {/* Notification handler */ }\r\n    // initial value\r\n    let [notification, setNotification] = useState({\r\n        loading: false,\r\n        error: false,\r\n        success: false\r\n    })\r\n\r\n    {/* Form values handler */ }\r\n\r\n    // initial value\r\n    let [input, setInput] = useState({\r\n        password: \"\",\r\n        email: \"\"\r\n    })\r\n    // change value\r\n    let onChange = async (event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.id;\r\n        console.log(input)\r\n        setInput({\r\n            ...input,\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n\r\n    {/* Form values submit */ }\r\n\r\n    let onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        setNotification({\r\n            loading: false,\r\n            error: false,\r\n            success: false\r\n        })\r\n        try {\r\n            setNotification({\r\n                ...notification,\r\n                loading: true\r\n            })\r\n            let response = await login({\r\n                password: input.password,\r\n                email: input.email\r\n            })\r\n           \r\n            console.log({response, notification})\r\n\r\n            if (response.success === true) {\r\n                setCookie(\"signInToken\", response.token, 4)\r\n                dispatch(setSignedIn());\r\n        \r\n                setNotification({\r\n                    ...notification,\r\n                    loading: false,\r\n                    success: true\r\n                })\r\n                await dispatch(fetchProfile())\r\n            } else {\r\n                setNotification({\r\n                    ...notification,\r\n                    loading: false,\r\n                    error: true\r\n                })\r\n            }\r\n        }\r\n        catch (error) {\r\n            setNotification({\r\n                ...notification,\r\n                loading: false,\r\n                error: true\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <div className=\"scaffold\">\r\n                <MDBRow className=\"my-2\" center>\r\n                    <MDBCard className=\"mx-auto real-signin-container\">\r\n                        <MDBCardImage className=\"img-edit\" waves src={NavbarBrandImg} />\r\n                        <MDBCardTitle className=\"text-align-center\">\r\n                            <b > GLOBAL SOCCER SHOP </b>\r\n                        </MDBCardTitle>\r\n                        <MDBCardBody>\r\n                            <form>\r\n                                <MDBRow>\r\n                                    <MDBCol>\r\n                                        <label htmlFor=\"email\" className=\"d-block my-3\" > Email address </label>\r\n                                        <div className=\"input-group my-2\">\r\n                                            <input type=\"email\" id=\"email\" className=\"form-control py-0\" onChange={(event) => { onChange(event) }} placeholder=\"Enter your email address\" aria-describedby=\"basic-addon1\" />\r\n                                        </div>\r\n\r\n                                        <label htmlFor=\"password\" className=\"d-block my-3\"> Password </label>\r\n                                        <input type=\"password\" id=\"password\" className=\"form-control my-2\"  onChange={(event) => { onChange(event) }} placeholder=\"Enter your password\" />\r\n                                        <br />\r\n                                        <br />\r\n                                        {notification.loading && <Spinner />}\r\n                                        {notification.error && <AlertPage text=\"Not signed in\" />}\r\n                                        {notification.success && <Success text=\"Signed in\" />}\r\n                                        <div className=\"text-align-center my-3\">\r\n                                            <MDBBtn outline color=\"amber lighten-1 my-2\" onClick={(event) => { onSubmit(event) }}  > Sign In </MDBBtn>\r\n                                        </div>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </form>\r\n                            <small>\r\n                                <Link className=\"text-danger\" to=\"/signUp\" >Don't have an account? Sign up instead.</Link>\r\n                            </small>\r\n                        </MDBCardBody>\r\n                    </MDBCard>\r\n                </MDBRow >\r\n            </div>\r\n        </MDBContainer >\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default SignIn;","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\AccessoriesPartTwo.js",["179","180"],"import React, { useEffect } from 'react'\r\nimport EcommerceGridVertical from '../components/EcommerceGridVerticalPartTwo'\r\nimport Overlay from '../components/Overlay'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport AccessoriesImg from \"../assets/Accessories.jpg\"\r\nimport { fetchAll, selectProducts } from './ProductSlice'\r\nimport { useParams } from 'react-router-dom'\r\nimport EcommerceGridHorizontal from '../components/EcommerceGridHorizontalPartTwo'\r\n\r\n// The placement of react router is everything\r\n// If you want the page to be replaced, \r\n// no other alternative but to put here.\r\n\r\n\r\nfunction JerseysPartTwo() {\r\n    // /:userPath\r\n    // variable must be userPath\r\n    const { userPath } = useParams();\r\n    console.log({ userPath })\r\n\r\n    // let urlNamePart = value.name.replace(/\\s/g, '').toLowerCase();\r\n    // urlNamePart = urlNamePart.replaceAll(\"/\", \"-\")\r\n\r\n    let elem = useSelector(selectProducts)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n\r\n        async function fetchData() { try {\r\n            const originalPromiseResult = await dispatch(fetchAll('accessories')).unwrap()\r\n            if (originalPromiseResult.product)\r\n                console.log({ okay: originalPromiseResult })\r\n\r\n        } catch (rejectedValueOrSerializedError) {\r\n            console.log({ failed: rejectedValueOrSerializedError })\r\n        }}\r\n        let controller = new AbortController();\r\n        fetchData()\r\n        console.log(elem)\r\n        return () => {\r\n            return () => controller?.abort();\r\n\r\n        }\r\n    }, [elem.length])\r\n\r\n    return (\r\n        <div>\r\n            <Overlay imgSrc={AccessoriesImg} alt=\"accessories\" >\r\n                <h1>THE PERFECT EQUIPMENT</h1>\r\n            </Overlay>\r\n            {/* <EcommerceGridHorizontal product=\"accessories\" data={elem} numberOfItems={4} headingTrue={true} /> */}\r\n            <EcommerceGridVertical product=\"accessories\" data={elem} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JerseysPartTwo\r\n","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\DescriptionPartTwo.js",["181"],"import React, { Fragment, useState, useEffect } from 'react'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport { MDBBreadcrumb, MDBBreadcrumbItem, MDBCol, MDBContainer, MDBRow, MDBBtn } from \"mdbreact\";\r\nimport \"./Description.css\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addProduct } from \"./CartSlice\";\r\nimport { fetchProduct, selectCurrentProduct } from './ProductSlice';\r\nimport { cookieKey } from '../api/env';\r\nimport { getCookie } from '../api/api';\r\n\r\nconst BreadcrumbPage = ({ type, productName, productid }) => {\r\n    return (\r\n        <MDBContainer className=\"mt-2 pt-4 mb-0\">\r\n            <MDBBreadcrumb style={{ backgroundColor: \"transparent\" }} >\r\n                <MDBBreadcrumbItem >\r\n                    <Link to=\"/\" className=\"text-warning font-weight-bold\"> Home </Link>\r\n                </MDBBreadcrumbItem>\r\n                <MDBBreadcrumbItem className=\"text-capitalize\">\r\n                    <Link to={`/${type.toLowerCase()}`} className=\"text-warning font-weight-bold\">\r\n                        {type}\r\n                    </Link>\r\n                </MDBBreadcrumbItem>\r\n                <MDBBreadcrumbItem >\r\n                    <Link to={`/${type.toLowerCase()}/${productid}`} className=\"text-warning font-weight-bold\">\r\n                        {productName}\r\n                    </Link>\r\n                </MDBBreadcrumbItem>\r\n            </MDBBreadcrumb>\r\n        </MDBContainer>\r\n    );\r\n};\r\n\r\nfunction generateProductAd(productNameForAdd) {\r\n    let productAd = \"\";\r\n    if (productNameForAdd === \"boots\") {\r\n        productAd = \"Stylish boots| Great coomfort and support| Synthetic | Split grooves \"\r\n    }\r\n    else if (productNameForAdd === \"jerseys\") {\r\n        productAd = \"Super-premium fabric| Lycra sleeves | Side Mesh | Silicon Elastic Bottom Grip| Customizable\"\r\n    }\r\n    else {\r\n        productAd = \"Premium quality accessories| Exported from the best places\"\r\n    }\r\n    return productAd\r\n}\r\n// 1. Variable must be in a different function\r\n// 2. Variable must be in a different component\r\n// 3. Try to find patterns and replicate documentation\r\n// instead of creativity.\r\n// Because often only a particular pattern works \r\n\r\n// Your natural program flow is not important\r\n// Documentation structure and flow is more important\r\n/* DERIVED STATE FROM PROPS? NO NEED */\r\n/* DERIVED STATE FROM PROPS? */\r\n\r\n\r\n\r\n// let productAd= generateProductAd(product)\r\n//  product is product's name\r\n/*\r\n    name, price, imageSrc, type\r\n    inputs: rate, size, quantity\r\n*/\r\nfunction DescriptionPartTwo() {\r\n\r\n    const { userPath } = useParams();\r\n    console.log({ userPath })\r\n    let product = useSelector(selectCurrentProduct)\r\n    let [cartStateToReducer, setCartStateToReducer] = useState({\r\n        // INPUT\r\n        rate: 0,\r\n        size: \"SM\",\r\n        quantity: 1\r\n        // INPUT\r\n    })\r\n\r\n    console.log(\"okay\")\r\n\r\n    let handleInputChange = (event) => {\r\n        console.log({ product })\r\n\r\n        const target = event.target;\r\n        let value = target.value;\r\n        value = (Object.is(parseInt(value), NaN)) ? value : parseInt(value);\r\n        const name = target.name;\r\n        if (name === \"quantity\" && (value === null || value === undefined)) {\r\n            return;\r\n        }\r\n        else if (name === \"quantity\" && value < 0) {\r\n            alert(\"Value can't be less than zero\")\r\n            return;\r\n        }\r\n        setCartStateToReducer({\r\n            ...cartStateToReducer,\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    let addToCart = async () => {\r\n        let size = document.querySelector('select[name=size]').value\r\n        let quantity = parseFloat(document.querySelector('input[name=quantity]').value)\r\n        let body = { size, quantity }\r\n        console.log({ size, quantity })\r\n\r\n        if (cartStateToReducer.quantity > 0) {\r\n            \r\n            const token = getCookie(cookieKey)\r\n            if (token===undefined) {\r\n\r\n                alert(\"Sign in first!\")\r\n                return \"\";\r\n            }\r\n            else {\r\n                alert(\"Added to cart.\")\r\n            }\r\n            alert(\"Added to cart.\")\r\n            \r\n            await dispatch(addProduct({productId: userPath, body }))\r\n        }\r\n        else {\r\n            alert(\"Quantity can't be less than zero\")\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        // fetch Data\r\n        async function fetchData() {\r\n            console.log(\"okay\")\r\n            const originalPromiseResult = await dispatch(fetchProduct(userPath)).unwrap()\r\n            console.log({ okay: originalPromiseResult.product })\r\n            // if (typeof originalPromiseResult.product !== undefined) {\r\n            //     setProduct(originalPromiseResult.product)\r\n            //     setCartStateToReducer({ rate: product.ratings, size: product.size, quantity: 1 })\r\n            // }\r\n            // else {\r\n            //     setProduct({})\r\n            // }\r\n        }\r\n        // S0 CAN ACCESS ENTIRE PAGE\r\n        let cartIcon = document.querySelector('.cart-icon')\r\n        cartIcon.classList.add('glow-icon')\r\n        window.setTimeout(() => {\r\n            cartIcon.classList.remove('glow-icon')\r\n        }, 3000)\r\n\r\n        let controller = new AbortController();\r\n        try {\r\n            fetchData()\r\n        } catch (rejectedValueOrSerializedError) {\r\n            console.log({ failed: rejectedValueOrSerializedError })\r\n        }\r\n        return () => {\r\n            controller?.abort();\r\n\r\n        }\r\n    }, [product.name, userPath])\r\n\r\n    return (\r\n        // Interpreter thinks that you return undefined and doesn't \r\n        // check your next line. That's the return operator thing.\r\n        // Put your opened bracket on the same line with the return.\r\n        <Fragment>\r\n            {product.name !== undefined &&\r\n                < div style={{ marginTop: \"-80px\" }}>\r\n                    <br />\r\n                    <BreadcrumbPage type={product.type} productName={product.name} productid={product._id} />\r\n                    <MDBContainer className=\"pt-0\">\r\n                        <MDBRow style={{ marginTop: 0, paddingTop: 0 }} className=\"pt-0\">\r\n                            <MDBCol xs=\"12\" lg=\"6\" className=\"col-xs-12-imageWraper\" >\r\n                                <img src={`/assets/${product.type}/imageL${product.image.substring(5)}`} alt={`${product.name}`}\r\n                                    className=\"description-img frame\"\r\n                                />\r\n                            </MDBCol>\r\n                            <MDBCol xs=\"12\" lg=\"6\">\r\n                                <div className=\"special-font font-weight-bold mq-center\">\r\n                                    <h5 className=\"font-weight-bold \">\r\n                                        {product.name}\r\n                                    </h5>\r\n                                    <h5 className=\"font-weight-bold \">\r\n                                        {product.price}\r\n                                    </h5>\r\n                                    <div className=\"rate\" onChange={(evt) => { handleInputChange(evt) }}>\r\n                                        <input type=\"radio\" id=\"star5\" name=\"rate\" value=\"5\" />\r\n                                        <label htmlFor=\"star5\" title=\"text\">5 stars</label>\r\n                                        <input type=\"radio\" id=\"star4\" name=\"rate\" value=\"4\" />\r\n                                        <label htmlFor=\"star4\" title=\"text\">4 stars</label>\r\n                                        <input type=\"radio\" id=\"star3\" name=\"rate\" value=\"3\" />\r\n                                        <label htmlFor=\"star3\" title=\"text\">3 stars</label>\r\n                                        <input type=\"radio\" id=\"star2\" name=\"rate\" value=\"2\" />\r\n                                        <label htmlFor=\"star2\" title=\"text\">2 stars</label>\r\n                                        <input type=\"radio\" id=\"star1\" name=\"rate\" value=\"1\" />\r\n                                        <label htmlFor=\"star1\" title=\"text\">1 star</label>\r\n                                    </div>\r\n                                </div>\r\n                                <br />\r\n                                <hr />\r\n                                <br />\r\n                                <div className=\"special-font\">\r\n                                    <p>\r\n                                        Premium quality {product.type}\r\n                                    </p>\r\n                                    <p> {generateProductAd(product.type)}</p>\r\n                                    <br />\r\n                                    <p className=\"text\">\r\n                                        Please cross-check your size with the size chart to ensure a good fit.\r\n                                        <br />\r\n\r\n                                    </p>\r\n                                </div>\r\n\r\n                                <br />\r\n                                <table>\r\n                                    <tbody >\r\n                                        <tr className=\"mb-4\">\r\n                                            <td className=\"text-left ml-0 px-0\">\r\n                                                <span>SIZE: </span>\r\n                                            </td>\r\n                                            <td>\r\n                                                {product.type !== \"accessories\" &&\r\n                                                    <select className=\"form-control\" style={{ width: \"100px\" }} onChange={(evt) => { handleInputChange(evt) }} name=\"size\">\r\n                                                        <option>SM</option>\r\n                                                        <option>L</option>\r\n                                                        <option>XL</option>\r\n                                                        <option>XXL</option>\r\n                                                    </select>\r\n                                                }\r\n                                                {product.type === \"accessories\" &&\r\n                                                    <select className=\"form-control\" style={{ width: \"100px\" }} onChange={(evt) => { handleInputChange(evt) }} name=\"size\">\r\n                                                        <option>Standard</option>\r\n                                                    </select>\r\n                                                }\r\n                                            </td>\r\n                                        </tr>\r\n                                        <br />\r\n                                        <tr>\r\n                                            <td className=\"text-left ml-0 px-0\">\r\n                                                <span>QUANTITY: </span>\r\n                                            </td>\r\n                                            <td>\r\n                                                <input type=\"number\" name=\"quantity\" style={{ width: \"100px\" }} value={cartStateToReducer.quantity} className=\"form-control\" onChange={(evt) => { handleInputChange(evt) }} />,\r\n                                                {/* <MDBInput type=\"number\" name=\"quantity\" default={sentObject.qty} className=\"form-control\" style={{ width: \"80px\" }} onChange={(evt) => { handleInputChange(evt) }} />, */}\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n\r\n                                </table>\r\n                                <br />\r\n                                <br />\r\n                                <MDBBtn outline color=\"amber\" className=\"mx-auto\" onClick={addToCart}>ADD TO CART</MDBBtn>\r\n\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n\r\n                        <MDBRow>\r\n                            <MDBCol >\r\n                            </MDBCol>\r\n                            <MDBCol xs=\"12\" lg=\"6\">\r\n                                <i>\r\n                                    Note: Your Product will be dispatched/ shipped within 7-10 days\r\n                                </i>\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    </MDBContainer>\r\n                </div>\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default DescriptionPartTwo\r\n","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\BootsPartTwo.js",["182","183"],"import React, { useEffect } from 'react'\r\nimport EcommerceGridHorizontal from '../components/EcommerceGridHorizontalPartTwo'\r\nimport EcommerceGridVertical from '../components/EcommerceGridVerticalPartTwo'\r\nimport Overlay from '../components/Overlay'\r\nimport BootsImg from \"../assets/Boots.jpg\"\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { fetchAll, selectProducts } from './ProductSlice'\r\nimport { useParams } from 'react-router-dom'\r\n\r\n// The placement of react router is everything\r\n// If you want the page to be replaced, \r\n// no other alternative but to put here.\r\n\r\n\r\nfunction JerseysPartTwo() {\r\n    // /:userPath\r\n    // variable must be userPath\r\n    const { userPath } = useParams();\r\n    console.log({ userPath })\r\n\r\n    // let urlNamePart = value.name.replace(/\\s/g, '').toLowerCase();\r\n    // urlNamePart = urlNamePart.replaceAll(\"/\", \"-\")\r\n\r\n    let elem = useSelector(selectProducts)\r\n    const dispatch = useDispatch()\r\n    useEffect( () => {\r\n        let controller = new AbortController();\r\n        async function fetchData() {\r\n            try {\r\n                const originalPromiseResult = await dispatch(fetchAll('boots')).unwrap()\r\n                if (originalPromiseResult.product)\r\n                    console.log({ okay: originalPromiseResult })\r\n\r\n            } catch (rejectedValueOrSerializedError) {\r\n                console.log({ failed: rejectedValueOrSerializedError })\r\n            }\r\n        }\r\n\r\n        fetchData()\r\n\r\n        return () => {\r\n            return () => controller?.abort();\r\n\r\n        }\r\n    }, [elem.length])\r\n\r\n    return (\r\n        <div>\r\n            <Overlay imgSrc={BootsImg} alt=\"boots\" >\r\n                <h5>PREMIUM QUALITY CLEATS</h5>\r\n            </Overlay>\r\n            {/* <EcommerceGridHorizontal product=\"boots\" data={elem} numberOfItems={4} headingTrue={true} /> */}\r\n            <EcommerceGridVertical product=\"boots\" data={elem} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JerseysPartTwo\r\n","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\Purchases.js",["184","185","186","187","188","189","190","191","192","193","194","195"],"import React, { useState, Fragment, useEffect } from \"react\";\r\nimport { MDBRow, MDBCard, MDBCardBody, MDBTable, MDBTableBody, MDBTableHead, MDBBtn, MDBCollapse, MDBIcon } from \"mdbreact\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectCart, editProduct, fetchCart, deleteProduct } from \"./CartSlice\";\r\nimport { useHistory } from \"react-router\";\r\nimport \"./Cart.css\"\r\nimport { editProfile } from \"./ProfileSlice\";\r\nimport { api } from \"../api/api\";\r\nimport { roundOff } from \"../helper/helper\";\r\n// name, price, imageSrc, type\r\n// inputs: rate, size, quantity\r\n\r\n\r\nfunction deepCopyObj(obj) {\r\n  if (null == obj || \"object\" != typeof obj) return obj;\r\n  if (obj instanceof Date) {\r\n    var copy = new Date();\r\n    copy.setTime(obj.getTime());\r\n    return copy;\r\n  }\r\n  if (obj instanceof Array) {\r\n    var copy = [];\r\n    for (var i = 0, len = obj.length; i < len; i++) {\r\n      copy[i] = deepCopyObj(obj[i]);\r\n    }\r\n    return copy;\r\n  }\r\n  if (obj instanceof Object) {\r\n    var copy = {};\r\n    for (var attr in obj) {\r\n      if (obj.hasOwnProperty(attr)) copy[attr] = deepCopyObj(obj[attr]);\r\n    }\r\n    return copy;\r\n  }\r\n  throw new Error(\"Unable to copy obj this object.\");\r\n}\r\nexport default function Purchases() {\r\n\r\n  let [data, setData] = useState([{\r\n    products: [],\r\n    description: [{ quantity: 0, size: \"\" }],\r\n    total: 0,\r\n    paid: false\r\n  }]);\r\n  const dispatch = useDispatch();\r\n  console.log({ data })\r\n\r\n  useEffect(() => {\r\n    // fetch Data\r\n    async function fetchData() {\r\n      const response = await api('GET', `cart`, {\r\n        mode: 'cors',\r\n      })\r\n      if (response.cart !== undefined)\r\n        setData(deepCopyObj(response.cart))\r\n    }\r\n\r\n    let controller = new AbortController();\r\n    try {\r\n      fetchData()\r\n    } catch (rejectedValueOrSerializedError) {\r\n      console.log({ failed: rejectedValueOrSerializedError })\r\n    }\r\n    return () => {\r\n      controller?.abort();\r\n\r\n    }\r\n  }, [data.length])\r\n\r\n  return <>\r\n    <MDBRow className=\"my-2 special-margin\" center>\r\n      <MDBCard style={{ marginTop: \"50px\" }}>\r\n        <MDBCardBody>\r\n          <h3 className=\"text-warning my-2 text-center\"> Purchases </h3>\r\n          <br />\r\n          {data.map((value, index) => {\r\n            return (\r\n              <Cart key={`${value}${index}history`} data={value} />\r\n            )\r\n          })}\r\n        </MDBCardBody>\r\n      </MDBCard>\r\n    </MDBRow>\r\n  </>\r\n}\r\nexport function Cart({ data }) {\r\n  /*\r\n          name, price, imageSrc, type\r\n          inputs: rate, size, quantity\r\n      */\r\n\r\n\r\n  // const response = await api('GET', `cart`, {\r\n  //   mode: 'cors',\r\n  // })\r\n\r\n  let [collapse, setCollapse] = useState(Array(data.length).fill(false));\r\n  let toggleCollapse = index => () => {\r\n    setCollapse((prev) => {\r\n      let newCollapse = [...prev]\r\n      newCollapse[index] = !prev[index]\r\n      return newCollapse\r\n    })\r\n  }\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  let columns = [\r\n    {\r\n      label: <strong>Image</strong>,\r\n      field: 'imageSrc',\r\n    },\r\n    {\r\n      label: <strong>Cart</strong>,\r\n      field: 'name'\r\n    },\r\n    {\r\n      label: <strong>Size</strong>,\r\n      field: 'size'\r\n    },\r\n    {\r\n      label: <strong>Price</strong>,\r\n      field: 'price'\r\n    },\r\n    {\r\n      label: <strong>Quantity</strong>,\r\n      field: 'quantity'\r\n    },\r\n    {\r\n      label: <strong>Amount</strong>,\r\n      field: 'amount'\r\n    },\r\n  ]\r\n\r\n  let total = 0;\r\n  let rows = []\r\n  if (data.products) {\r\n    data.products.forEach((value, index) => {\r\n      let totalPrice = 0\r\n      totalPrice = parseFloat(data.description[index].quantity) * parseFloat(value.price)\r\n      total += totalPrice\r\n      rows.push(\r\n        {\r\n          'imageSrc': <img src={`/assets/${value.type}/${value.image}`} alt=\"\" style={{ width: \"50px\" }} />,\r\n          'name': <strong> £ {value.name}</strong>,\r\n          'size': <strong> {data.description[index].size} </strong>,\r\n          'price': <strong> {roundOff(value.price)} </strong>,\r\n          'quantity':\r\n            <input name=\"quantity\" value={data.description[index].quantity} id=\"quantity\" className=\"specialInput border-warning\" style={{ width: \"100px\" }} disabled />,\r\n          'amount': <strong> £ {totalPrice}</strong>,\r\n        }\r\n      )\r\n    });\r\n  }\r\n  let handleInputChange = async (event, index) => {\r\n    let quantity = parseInt(event.target.value);\r\n    let size = data.description[index].size\r\n    console.log({ quantity, size })\r\n    index = parseInt(index)\r\n    if (quantity <= 0) {\r\n      alert(\"value cannot be less than zero\");\r\n    }\r\n    else {\r\n      let body = { size, quantity }\r\n      let productId = data.products[index]._id\r\n      // console.log({ size, quantity, productId })\r\n      let returnValue = await dispatch(editProduct({ productId, index, body })).unwrap()\r\n      console.log(returnValue)\r\n\r\n    }\r\n  }\r\n\r\n  let checkOut = async (totalPurchase) => {\r\n    if (rows.length === 0) {\r\n      alert(\"Purchase an item first!\");\r\n    }\r\n    else {\r\n      let returnValue = await dispatch(editProfile({ body: { totalPurchase } })).unwrap()\r\n      console.log(returnValue)\r\n      history.replace(\"/checkOut\")\r\n    }\r\n  }\r\n\r\n  let deleteCart = (index) => {\r\n    dispatch(deleteProduct(index))\r\n  }\r\n\r\n  return (\r\n    <div className=\"my-3\">\r\n\r\n\r\n      {/* Table */}\r\n\r\n      <MDBTable className=\"product-table d-none d-lg-table w-80\">\r\n        <MDBTableHead className=\"form-control font-weight-bold purchase\" color=\"amber lighten-5 border-0 border border-warning\" columns={columns} />\r\n        <MDBTableBody rows={rows} />\r\n      </MDBTable>\r\n\r\n      {/* Table */}\r\n      <div className=\"px-1\">\r\n        <div className=\"d-grid d-lg-none w-80 border border-warning py-2\"\r\n          style={{\r\n            display: \"grid \", gridTemplateColumns: \"0.5fr 1fr 3fr 1fr\", justifyContent: \"center\",\r\n            alignItems: \"center\", background: \"#FFF8E1\"\r\n\r\n          }}\r\n        >\r\n          <span\r\n          >\r\n\r\n          </span>\r\n          <span>\r\n            Image\r\n          </span>\r\n          <span>\r\n            Name\r\n          </span>\r\n          <div\r\n            className=\"mx-auto\"\r\n          >\r\n          </div>\r\n        </div>\r\n        {\r\n          data.products &&\r\n          data.products[0] !== null &&\r\n          rows.map((val, index) => {\r\n\r\n            return (\r\n              <Fragment key={`${val}${index}}`} >\r\n                <div onClick={toggleCollapse(index)} className=\"d-grid d-lg-none w-80 border-top border-bottom border-warning py-2\"\r\n                  style={{\r\n                    display: \"grid \", gridTemplateColumns: \"0.5fr 1fr 3fr 1fr\", justifyContent: \"center\",\r\n                    alignItems: \"center\"\r\n\r\n                  }}\r\n                >\r\n                  <span\r\n                  >\r\n                    <  MDBIcon icon=\"angle-down\" />\r\n                  </span>\r\n                  <span>\r\n                    {val.imageSrc}\r\n                  </span>\r\n                  <span>\r\n                    {val.name}\r\n\r\n                  </span>\r\n                  <div\r\n                    className=\"mx-auto\"\r\n                  >\r\n                   \r\n                  </div>\r\n                </div>\r\n                <MDBCollapse id=\"basicCollapse\" isOpen={collapse[index]} className=\"py-3 align-items-around\" style={{ height: \"130px\" }}>\r\n                  <div className=\"pl-5 ml-5\">\r\n                    <strong> Size: {val.size} </strong>\r\n                    <br />\r\n                    <strong> Price: {val.price} </strong>\r\n                    <br />\r\n                    <strong> Quantity {val.quantity} </strong>\r\n                    <br />\r\n                    <strong> {val.amount}</strong>\r\n                  </div>\r\n                </MDBCollapse>\r\n              </Fragment>\r\n            )\r\n          }\r\n          )\r\n        }\r\n      </div>\r\n      {\r\n        !data.products ||\r\n        data.products[0] === null &&\r\n        <div style={{ textAlign: \"center\" }}>\r\n          Added nothing to cart !\r\n        </div>\r\n\r\n      }\r\n      {\r\n        data.products &&\r\n        data.products[0] !== null &&\r\n        <div className=\"pr-5\">\r\n          <div className=\"mt-3 d-flex justify-content-end\">\r\n            <strong>TOTAL : &nbsp;</strong>\r\n            <strong className=\"ml-4\">{roundOff(total)}</strong>\r\n          </div>\r\n        </div>\r\n      }\r\n    </div >\r\n  );\r\n}\r\n\r\n\r\n","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\Carousel.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\api\\api.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\Overlay.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\EcommerceGridVerticalPartTwo.js",["196"],"import React, { useState, useEffect, Fragment } from 'react'\r\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle,  MDBTooltip} from 'mdbreact';\r\nimport { NavLink } from 'react-router-dom';\r\nimport \"../components/EcommerceGridVertical.css\"\r\n// JS for loop doesnt work inside html\r\n\r\nfunction EcommerceGridVertical({ product, data }) {\r\n    let [begin, setBegin] = useState(0);\r\n    let length = 16;\r\n    let dataLength = data.length;\r\n    let increment = (multiplier) => {\r\n        setBegin((prev) => {\r\n            prev = prev + (length * parseInt(multiplier))\r\n            if (prev <= 0) {\r\n                prev = 0;\r\n            }\r\n            if (prev >= dataLength) {\r\n                prev = dataLength - length;\r\n            }\r\n            return prev;\r\n        });\r\n    }\r\n    let num = Math.ceil(parseInt(dataLength) / parseInt(length));\r\n    let arr = [];\r\n    for (var i = 0; i < num; i++) {\r\n        arr.push(i)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div>\r\n                <h1 className=\"text-center text-uppercase font-weight-bolder text-warning my-5 py-3\"> Our {product} </h1>\r\n                <div className=\"loadGrid__gridItems\">\r\n                    {\r\n                        data !== null &&\r\n                        data.map((value, index) => {\r\n                            if (index+length >= begin && (index+length < begin+length || index+length < dataLength) ) return null\r\n                            else return (\r\n                                <Fragment key={`${index}${value._id}`}>\r\n                                    <MDBCard className=\"px-0 mx-0\" style={{ border: \"1px solid gold\" }}>\r\n\r\n                                        <NavLink to={`/${product}/${value._id}`} className=\"image-hyperlink\">\r\n                                            <MDBCardImage className=\"card-image\" src={`/assets/${product}/image${index}.jpg`} alt={`image${index}`} waves />\r\n\r\n                                            <MDBCardBody className=\"d-flex flex-column justify-content-center align-items-center\">\r\n                                                <MDBCardTitle >\r\n                                                    <MDBTooltip\r\n                                                        domElement tag=\"span\"\r\n                                                        placement=\"top\"\r\n                                                    >\r\n                                                        <p className=\"card-text-custom text\"> {value.name} </p>\r\n                                                        <span> {value.name} </span>\r\n                                                    </MDBTooltip>\r\n                                                </MDBCardTitle>\r\n                                                <p className=\"card-text-custom text-bold\">\r\n                                                    {value.price}\r\n                                                </p>\r\n                                            </MDBCardBody>\r\n                                        </NavLink>\r\n                                    </MDBCard>\r\n                                </Fragment>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                <div className=\"divBtnOutline text-center py-5\">\r\n                    <MDBBtn\r\n                        onClick={\r\n                            () => increment(-1)\r\n                        }\r\n                    > Prev </MDBBtn>\r\n                    {\r\n                        arr.map((value) => {\r\n                            return (\r\n                                <MDBBtn key={`${value}button`} onClick={() => {\r\n                                    setBegin(length * value)\r\n                                }\r\n                                }>\r\n                                    {value + 1}\r\n                                </MDBBtn>\r\n                            )\r\n                        }\r\n                        )\r\n                    }\r\n                    <MDBBtn\r\n                        onClick={\r\n                            () => increment(1)\r\n                        }> Next </MDBBtn>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default EcommerceGridVertical\r\n","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\notifications\\alert.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\notifications\\spinner.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\helper\\helper.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\api\\auth.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\notifications\\success.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\components\\EcommerceGridHorizontalPartTwo.js",["197","198"],"import React, { Fragment, useEffect, useState } from 'react'\r\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBTooltip } from 'mdbreact';\r\nimport { NavLink } from 'react-router-dom';\r\nimport \"./EcommerceGridHorizontal.css\"\r\n\r\nfunction EcommerceGridHorizontalPartTwo({ product, data, numberOfItems, headingTrue }) {\r\n\r\n    let [jsonData, setJsonData] = useState([\r\n    ]);\r\n    console.log({data})\r\n    useEffect( () => {\r\n        setJsonData(data[3], data[6], data[9], data[12])\r\n    }, [data.length])\r\n    // jsonData is updated in useEffect, so if you keep jsonData in dependency array, useEffect will be implementeda\r\n    // again and again\r\n    // so if you keep begin in dependency array, they are updated outside useEffect\r\n    // so no continuous re-render\r\n    return (\r\n        <Fragment>\r\n            <div className=\"text-center position-relative outerRow\">\r\n                {headingTrue && <h1 className=\"text-center text-uppercase font-weight-bolder text-warning my-5 py-3 my-5\"> Best Value {product} </h1>}\r\n                <div className=\"loadRow__Items\">\r\n                    {\r\n                        jsonData !== null &&\r\n                        data[0].hasOwnProperty('value')== undefined &&\r\n                        jsonData.map((value, index) => {\r\n                            console.log({ jsonData })\r\n                            if (index > numberOfItems - 1) return null\r\n                            return (\r\n                                <Fragment key={index}>\r\n                                    <MDBCard style={{ borderRadius: \"10px !important\", border: \"0.5px solid gold\", boxShadow: \"0px 0px 5x 0px lightyellow\" }} >\r\n                                        <NavLink to={`/${value.type}/${value._id}`}>\r\n                                            <MDBCardImage className=\"img-fluid rowImg\" src={`/assets/${product}/image${index}.jpg`} alt={`image${index}`} waves />\r\n                                            <MDBCardBody className=\"rowBody py-0\">\r\n                                                <MDBCardTitle className=\"rowTitle\">\r\n                                                    <MDBTooltip\r\n                                                        domElement tag=\"span\"\r\n                                                        placement=\"top\"\r\n                                                    >\r\n                                                        <p className=\"title-info-1\"> {value.name} </p>\r\n                                                        <span> {value.name} </span>\r\n                                                    </MDBTooltip>\r\n                                                </MDBCardTitle>\r\n                                                <p className=\"title-info-1\">{value.price}</p>\r\n                                            </MDBCardBody>\r\n                                        </NavLink>\r\n                                    </MDBCard>\r\n                                </Fragment>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        </Fragment >\r\n    )\r\n}\r\n\r\nexport default EcommerceGridHorizontalPartTwo\r\n","D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\api\\env.js",[],"D:\\My Files\\Web Dev\\Fullstack\\MERN E-commerce\\client\\src\\pages\\ModalPage.js",["199","200","201"],"import React, { Component } from 'react';\r\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\r\nimport { hostName } from '../api/env';\r\n\r\nclass ModalPage extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            modal: true,\r\n            currentCount: 10,\r\n            intervalId: 0\r\n        }\r\n        this.timer = this.timer.bind(this);\r\n        this.controller = new AbortController();\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.mounted = true;\r\n\r\n        fetch(`${hostName}/user`, {\r\n            signal: this.controller.signal\r\n        })\r\n            .then((response) => console.log(response.json()))\r\n        var intervalId = setInterval(this.timer, 1000);\r\n        // store intervalId in the state so it can be accessed later:\r\n        this.setState((prevState) => {\r\n            return {\r\n                ...prevState,\r\n                intervalId: intervalId,\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // use intervalId from the state to clear the interval\r\n        clearInterval(this.state.intervalId);\r\n        this.controller.abort();\r\n    }\r\n\r\n    timer() {\r\n        // setState method is used to update the state\r\n        this.setState({ currentCount: this.state.currentCount - 1 });\r\n        if (this.state.currentCount < 1) {\r\n            clearInterval(this.state.intervalId);\r\n\r\n            this.setState((prevState) => {\r\n                return {\r\n                    ...prevState,\r\n                    intervalId: 0,\r\n                    modal: false,\r\n                    currentCount: 0\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.state)\r\n        return (\r\n            <MDBModal isOpen={this.state.modal} toggle={this.toggle}>\r\n                <MDBModalHeader toggle={this.toggle}>Heroku free tier!!!</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <div className=\"text-center\">\r\n                        <h5>Heroku free tier is free forever but becomes inactive every 20min-30min.\r\n                        </h5>\r\n                        <h5> It will take\r\n                        </h5>\r\n                        <h1 className=\"text-danger\">\r\n\r\n                            {this.state.currentCount} </h1>\r\n                        <h5>\r\n                            seconds till database becomes active.\r\n                        </h5>\r\n                    </div>\r\n                </MDBModalBody>\r\n\r\n            </MDBModal >\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModalPage;",{"ruleId":"202","severity":1,"message":"203","line":18,"column":10,"nodeType":"204","messageId":"205","endLine":18,"endColumn":19},{"ruleId":"202","severity":1,"message":"206","line":18,"column":21,"nodeType":"204","messageId":"205","endLine":18,"endColumn":29},{"ruleId":"207","severity":1,"message":"208","line":19,"column":6,"nodeType":"209","endLine":19,"endColumn":8,"suggestions":"210"},{"ruleId":"202","severity":1,"message":"211","line":13,"column":9,"nodeType":"204","messageId":"205","endLine":13,"endColumn":16},{"ruleId":"202","severity":1,"message":"212","line":2,"column":70,"nodeType":"204","messageId":"205","endLine":2,"endColumn":80},{"ruleId":"202","severity":1,"message":"213","line":2,"column":90,"nodeType":"204","messageId":"205","endLine":2,"endColumn":97},{"ruleId":"214","severity":1,"message":"215","line":15,"column":5,"nodeType":"216","messageId":"217","endLine":15,"endColumn":33},{"ruleId":"207","severity":1,"message":"218","line":89,"column":8,"nodeType":"209","endLine":89,"endColumn":31,"suggestions":"219"},{"ruleId":"214","severity":1,"message":"215","line":19,"column":5,"nodeType":"216","messageId":"217","endLine":19,"endColumn":34},{"ruleId":"214","severity":1,"message":"215","line":29,"column":5,"nodeType":"216","messageId":"217","endLine":29,"endColumn":33},{"ruleId":"214","severity":1,"message":"215","line":51,"column":5,"nodeType":"216","messageId":"217","endLine":51,"endColumn":32},{"ruleId":"214","severity":1,"message":"215","line":95,"column":5,"nodeType":"216","messageId":"217","endLine":95,"endColumn":22},{"ruleId":"202","severity":1,"message":"220","line":98,"column":13,"nodeType":"204","messageId":"205","endLine":98,"endColumn":18},{"ruleId":"202","severity":1,"message":"221","line":4,"column":44,"nodeType":"204","messageId":"205","endLine":4,"endColumn":55},{"ruleId":"202","severity":1,"message":"212","line":4,"column":65,"nodeType":"204","messageId":"205","endLine":4,"endColumn":75},{"ruleId":"214","severity":1,"message":"215","line":22,"column":5,"nodeType":"216","messageId":"217","endLine":22,"endColumn":33},{"ruleId":"207","severity":1,"message":"222","line":86,"column":8,"nodeType":"209","endLine":86,"endColumn":43,"suggestions":"223"},{"ruleId":"202","severity":1,"message":"224","line":2,"column":8,"nodeType":"204","messageId":"205","endLine":2,"endColumn":31},{"ruleId":"207","severity":1,"message":"225","line":42,"column":8,"nodeType":"209","endLine":42,"endColumn":21,"suggestions":"226"},{"ruleId":"207","severity":1,"message":"225","line":108,"column":6,"nodeType":"209","endLine":108,"endColumn":19,"suggestions":"227"},{"ruleId":"228","severity":1,"message":"229","line":227,"column":30,"nodeType":"230","messageId":"231","endLine":227,"endColumn":32},{"ruleId":"228","severity":1,"message":"229","line":228,"column":41,"nodeType":"230","messageId":"231","endLine":228,"endColumn":43},{"ruleId":"214","severity":1,"message":"215","line":22,"column":5,"nodeType":"216","messageId":"217","endLine":22,"endColumn":34},{"ruleId":"214","severity":1,"message":"215","line":30,"column":5,"nodeType":"216","messageId":"217","endLine":30,"endColumn":33},{"ruleId":"214","severity":1,"message":"215","line":50,"column":5,"nodeType":"216","messageId":"217","endLine":50,"endColumn":32},{"ruleId":"202","severity":1,"message":"224","line":8,"column":8,"nodeType":"204","messageId":"205","endLine":8,"endColumn":31},{"ruleId":"207","severity":1,"message":"232","line":44,"column":8,"nodeType":"209","endLine":44,"endColumn":21,"suggestions":"233"},{"ruleId":"207","severity":1,"message":"225","line":160,"column":8,"nodeType":"209","endLine":160,"endColumn":32,"suggestions":"234"},{"ruleId":"202","severity":1,"message":"224","line":2,"column":8,"nodeType":"204","messageId":"205","endLine":2,"endColumn":31},{"ruleId":"207","severity":1,"message":"225","line":45,"column":8,"nodeType":"209","endLine":45,"endColumn":21,"suggestions":"235"},{"ruleId":"202","severity":1,"message":"236","line":2,"column":78,"nodeType":"204","messageId":"205","endLine":2,"endColumn":84},{"ruleId":"202","severity":1,"message":"237","line":3,"column":23,"nodeType":"204","messageId":"205","endLine":3,"endColumn":34},{"ruleId":"202","severity":1,"message":"238","line":4,"column":10,"nodeType":"204","messageId":"205","endLine":4,"endColumn":20},{"ruleId":"202","severity":1,"message":"239","line":4,"column":35,"nodeType":"204","messageId":"205","endLine":4,"endColumn":44},{"ruleId":"240","severity":1,"message":"241","line":22,"column":9,"nodeType":"204","messageId":"242","endLine":22,"endColumn":13},{"ruleId":"240","severity":1,"message":"241","line":29,"column":9,"nodeType":"204","messageId":"242","endLine":29,"endColumn":13},{"ruleId":"202","severity":1,"message":"243","line":45,"column":9,"nodeType":"204","messageId":"205","endLine":45,"endColumn":17},{"ruleId":"202","severity":1,"message":"244","line":154,"column":7,"nodeType":"204","messageId":"205","endLine":154,"endColumn":24},{"ruleId":"202","severity":1,"message":"245","line":172,"column":7,"nodeType":"204","messageId":"205","endLine":172,"endColumn":15},{"ruleId":"202","severity":1,"message":"246","line":183,"column":7,"nodeType":"204","messageId":"205","endLine":183,"endColumn":17},{"ruleId":"228","severity":1,"message":"229","line":271,"column":24,"nodeType":"230","messageId":"231","endLine":271,"endColumn":26},{"ruleId":"228","severity":1,"message":"229","line":272,"column":35,"nodeType":"230","messageId":"231","endLine":272,"endColumn":37},{"ruleId":"202","severity":1,"message":"247","line":1,"column":27,"nodeType":"204","messageId":"205","endLine":1,"endColumn":36},{"ruleId":"207","severity":1,"message":"248","line":13,"column":8,"nodeType":"209","endLine":13,"endColumn":21,"suggestions":"249"},{"ruleId":"250","severity":1,"message":"251","line":25,"column":56,"nodeType":"252","messageId":"253","endLine":25,"endColumn":58},{"ruleId":"202","severity":1,"message":"254","line":2,"column":10,"nodeType":"204","messageId":"205","endLine":2,"endColumn":22},{"ruleId":"202","severity":1,"message":"236","line":2,"column":24,"nodeType":"204","messageId":"205","endLine":2,"endColumn":30},{"ruleId":"202","severity":1,"message":"255","line":2,"column":72,"nodeType":"204","messageId":"205","endLine":2,"endColumn":86},"no-unused-vars","'cookieKey' is defined but never used.","Identifier","unusedVar","'hostName' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'state'. Either include them or remove the dependency array.","ArrayExpression",["256"],"'history' is assigned a value but never used.","'MDBTabPane' is defined but never used.","'MDBIcon' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has missing dependencies: 'dispatch', 'user.addressFirst', 'user.addressSecond', and 'user.creditCardCVV'. Either include them or remove the dependency array.",["257"],"'token' is assigned a value but never used.","'MDBCardBody' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'user.addressFirst', 'user.addressSecond', and 'user.creditCardCVV'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setInput' needs the current value of 'user.addressFirst'.",["258"],"'EcommerceGridHorizontal' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["259"],["260"],"no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","React Hook useEffect has missing dependencies: 'dispatch' and 'elem'. Either include them or remove the dependency array.",["261"],["262"],["263"],"'MDBBtn' is defined but never used.","'useSelector' is defined but never used.","'selectCart' is defined but never used.","'fetchCart' is defined but never used.","no-redeclare","'copy' is already defined.","redeclared","'dispatch' is assigned a value but never used.","'handleInputChange' is assigned a value but never used.","'checkOut' is assigned a value but never used.","'deleteCart' is assigned a value but never used.","'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array. If 'setJsonData' needs the current value of 'data', you can also switch to useReducer instead of useState and read 'data' in the reducer.",["264"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'MDBContainer' is defined but never used.","'MDBModalFooter' is defined but never used.",{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"271","fix":"279"},{"desc":"280","fix":"281"},"Update the dependencies array to be: [dispatch, history, state]",{"range":"282","text":"283"},"Update the dependencies array to be: [dispatch, user.addressFirst, user.addressSecond, user.creditCardCVV, user.creditCardNumber]",{"range":"284","text":"285"},"Update the dependencies array to be: [user.creditCardNumber, isSignedIn, dispatch, user.addressFirst, user.addressSecond, user.creditCardCVV]",{"range":"286","text":"287"},"Update the dependencies array to be: [dispatch, elem.length]",{"range":"288","text":"289"},"Update the dependencies array to be: [data.length, dispatch]",{"range":"290","text":"291"},"Update the dependencies array to be: [dispatch, elem, elem.length]",{"range":"292","text":"293"},"Update the dependencies array to be: [dispatch, product.name, userPath]",{"range":"294","text":"295"},{"range":"296","text":"289"},"Update the dependencies array to be: [data, data.length]",{"range":"297","text":"298"},[632,634],"[dispatch, history, state]",[2783,2806],"[dispatch, user.addressFirst, user.addressSecond, user.creditCardCVV, user.creditCardNumber]",[2845,2880],"[user.creditCardNumber, isSignedIn, dispatch, user.addressFirst, user.addressSecond, user.creditCardCVV]",[1565,1578],"[dispatch, elem.length]",[3352,3365],"[data.length, dispatch]",[1565,1578],"[dispatch, elem, elem.length]",[5539,5563],"[dispatch, product.name, userPath]",[1567,1580],[500,513],"[data, data.length]"]