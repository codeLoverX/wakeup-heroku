{"version":3,"sources":["pages/Hyperlinks.js","pages/history.js","pages/ModalPage.js","App.js","reportWebVitals.js","index.js"],"names":["Hyperlinks","style","height","width","display","justifyContent","flexDirection","alignItems","Object","keys","urList","map","value","index","to","createBrowserHistory","RouteComponent","withRouter","props","ModalPage","state","modal","currentCount","intervalId","timer","bind","controller","AbortController","_componentDidMountUpdate","this","newProps","console","log","mounted","pathname","location","substring","win","fetch","signal","then","response","catch","err","length","missing","window","open","present","focus","history","push","setInterval","setState","prevState","alert","replace","clearInterval","abort","undefined","isOpen","className","Component","App","path","children","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e3e0be7.chunk.js","sourcesContent":["import urList from '../json/urlList.json'\r\nimport React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\n\r\nexport let Hyperlinks = function () {\r\n    return (\r\n        <div style={{ height: \"100vh\", width: \"100vw\", display: \"flex\", justifyContent: \"center\", flexDirection: \"column\", alignItems: \"center\"}}>\r\n        <div>Enter one of my fun projects by clicking on the links: </div>\r\n        {Object.keys(urList).map((value, index) => {\r\n            return (\r\n                <div>\r\n                    <Link to={`/${value}`}  >\r\n                        {value}\r\n                    </Link>\r\n                </div>\r\n            );\r\n\r\n        })}\r\n        </div>\r\n        )\r\n}\r\n","// src/history.js\r\n\r\nimport { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React, { Component } from 'react';\r\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\r\nimport urList from '../json/urlList.json'\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport history from './history';\r\n\r\nexport const RouteComponent = withRouter(props => <ModalPage {...props} />);\r\n\r\n\r\n\r\nclass ModalPage extends Component {\r\n\r\n    constructor() {\r\n\r\n        super();\r\n        this.state = {\r\n            modal: true,\r\n            currentCount: 10,\r\n            intervalId: 0\r\n        }\r\n        this.timer = this.timer.bind(this);\r\n        this.controller = new AbortController();\r\n        this._componentDidMountUpdate = this._componentDidMountUpdate.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._componentDidMountUpdate()\r\n    }\r\n\r\n    componentWillReceiveProps(newProps) {\r\n        console.log(newProps); // data from parent received\r\n        this._componentDidMountUpdate()\r\n    }\r\n\r\n    _componentDidMountUpdate() {\r\n        console.log({ mounted: true })\r\n        this.mounted = true;\r\n        let { pathname } = this.props.location;\r\n        pathname = pathname.substring(1)\r\n        console.log({ pathname })\r\n\r\n        if (urList[pathname]) {\r\n            let win;\r\n            fetch(`${urList[pathname][0]}`, {\r\n                signal: this.controller.signal\r\n            })\r\n                .then((response) => console.log(response))\r\n                .catch((err) => { console.log(err) })\r\n            fetch(`${urList[pathname][0]}`, {\r\n                signal: this.controller.signal\r\n            })\r\n                .then((response) => {\r\n                    console.log(response)\r\n                    if (urList[pathname].length === 2) {\r\n                        console.log({ missing: urList[pathname][1] })\r\n                        win = window.open(urList[pathname][1], \"_blank\");\r\n                    }\r\n                    else {\r\n                        console.log({ present: urList[pathname][1] })\r\n                        win = window.open(urList[pathname][0], \"_blank\");\r\n\r\n                    }\r\n                    win.focus();\r\n                    history.push(\"/\")\r\n\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err)\r\n                    if (urList[pathname].length === 2) {\r\n                        console.log({ missing: urList[pathname][1] })\r\n                        win = window.open(urList[pathname][1], \"_blank\");\r\n                    }\r\n                    else {\r\n                        console.log({ present: urList[pathname][1] })\r\n                        win = window.open(urList[pathname][0], \"_blank\");\r\n                    }\r\n                    win.focus();\r\n                    history.push(\"/\")\r\n\r\n                })\r\n\r\n            var intervalId = setInterval(this.timer, 1000);\r\n            // store intervalId in the state so it can be accessed later:\r\n            this.setState((prevState) => {\r\n                return {\r\n                    ...prevState,\r\n                    intervalId: intervalId,\r\n                }\r\n            });\r\n        }\r\n\r\n        else {\r\n            if (pathname) {\r\n                alert(\"Hello wrong url\")\r\n                history.replace('/')\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // use intervalId from the state to clear the interval\r\n        clearInterval(this.state.intervalId);\r\n        this.controller.abort();\r\n    }\r\n\r\n    timer() {\r\n        // setState method is used to update the state\r\n        this.setState({ currentCount: this.state.currentCount - 1 });\r\n        if (this.state.currentCount < 1) {\r\n            clearInterval(this.state.intervalId);\r\n\r\n            this.setState((prevState) => {\r\n                return {\r\n                    ...prevState,\r\n                    intervalId: 0,\r\n                    modal: false,\r\n                    currentCount: 0\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        if (this.props.location !== undefined) {\r\n            let { pathname } = this.props.location;\r\n            console.log({ pathname })\r\n            pathname = pathname.substring(1)\r\n            if (urList[pathname]) {\r\n\r\n                return (\r\n                    <MDBModal isOpen={this.state.modal} >\r\n                        <MDBModalHeader>Heroku free tier!!!</MDBModalHeader>\r\n                        <MDBModalBody>\r\n                            <div className=\"text-center\">\r\n                                <h5>Free tier hosting becomes inactive every 20min-30min.\r\n                                </h5>\r\n                                <h5> It will take\r\n                                </h5>\r\n                                <h1 className=\"text-danger\">\r\n\r\n                                    {this.state.currentCount} </h1>\r\n                                <h5>\r\n                                    seconds till database becomes active.\r\n                                </h5>\r\n                            </div>\r\n                        </MDBModalBody>\r\n\r\n                    </MDBModal >\r\n                );\r\n            }\r\n            else {\r\n                return (\r\n                    <>\r\n\r\n                    </>\r\n                )\r\n            }\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n}","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Hyperlinks } from './pages/Hyperlinks';\n\nimport { RouteComponent } from './pages/ModalPage';\n\nfunction App() {\n\n  return (\n    // DESCRIPTION ROUTE IS IN THE PROFILE PAGE. IT'S AN EMBEDDED ROUTE\n    <div>\n        <Route path=\"/\">\n          <Hyperlinks />\n        </Route>\n        <Route path=\"/:id\" children={<RouteComponent />} />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport { BrowserRouter } from 'react-router-dom';\n\nimport \"./index.css\";\nimport App from \"./App\";\n\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n        <BrowserRouter>\n                    <App />\n        </BrowserRouter>,\n    document.getElementById('root'));\n\nreportWebVitals();\n"],"sourceRoot":""}